name: Test
on: [push, workflow_dispatch]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup docker
        shell: bash
        run: |
          docker-compose build
          docker-compose up -d
        env:
          RAILS_ENV: test
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}

      - name: sleep for waiting launch db
        run: sleep 1m

      - name: setup db
        run: docker-compose run --rm web rails db:create db:migrate
        env:
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}


      - name: Precompile assets
        run: docker-compose run --rm web rails assets:precompile
        env:
          RAILS_ENV: test

      - name: Run Rspec
        run:  |
          docker-compose run web bundle exec rspec

      - name: Run Rubocop
        run:  |
          docker-compose run web bundle exec rubocop

      - name: docker-compose down
        run: docker-compose down

  deploy:
    name: deploy
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Rails Docker image
        uses: docker/build-push-action@v2
        with:
          context: ../../nature-sounds-app/nature-sounds-app
          file: ../../nature-sounds-app/nature-sounds-app/dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/my_ecr_repo:rails_latest

      - name: Build and push Nginx Docker image
        uses: docker/build-push-action@v2
        with:
          context: ../../nature-sounds-app/nature-sounds-app/.nginx
          file: ../../nature-sounds-app/nature-sounds-app/.nginx/dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/my_ecr_repo:nginx_latest

      - name: Save Rails Docker image path
        id: save-rails-path
        run: echo "::set-output name=image::${{ steps.login-ecr.outputs.registry }}/my_ecr_repo:rails_latest"

      - name: Save Nginx Docker image path
        id: save-nginx-path
        run: echo "::set-output name=image::${{ steps.login-ecr.outputs.registry }}/my_ecr_repo:nginx_latest"

      - name: Replace placeholders with actual values
        run: |
          sed -i 's|${db_host}|${{ secrets.DB_HOST }}|g' ./.aws-terraform/task-definition.json
          sed -i 's|${db_username}|${{ secrets.DB_USERNAME }}|g' ./.aws-terraform/task-definition.json
          sed -i 's|${db_password}|${{ secrets.DB_PASSWORD }}|g' ./.aws-terraform/task-definition.json
          sed -i 's|${alb_dns_name}|${{ secrets.ALB_DNS_NAME }}|g' ./.aws-terraform/task-definition.json
          sed -i 's|${secret_key_base}|${{ secrets.SECRET_KEY_BASE }}|g' ./.aws-terraform/task-definition.json
          sed -i 's|${execution_role_arn}|${{ secrets.EXECUTION_ROLE_ARN }}|g' ./.aws-terraform/task-definition.json
          sed -i 's|${task_role_arn}|${{ secrets.TASK_ROLE_ARN }}|g' ./.aws-terraform/task-definition.json

      - name: Set Rails image in the Amazon ECS task definition
        id: task-def-with-rails
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./.aws-terraform/task-definition.json
          container-name: web
          image: ${{ steps.save-rails-path.outputs.image }}

      - name: Set Nginx image in the Amazon ECS task definition
        id: task-def-with-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-with-rails.outputs.task-definition }}
          container-name: nginx
          image: ${{ steps.save-nginx-path.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-with-nginx.outputs.task-definition }}
          service: nature-sounds-service
          cluster: nature_sounds_prod_cluster
          wait-for-service-stability: true
